-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Social network with threads in haskell
@package social-network
@version 0.1.0.0


module Types

-- | Used to create threads and identify each user
data User
User :: String -> String -> String -> [String] -> User
[username] :: User -> String
[email] :: User -> String
[password] :: User -> String
[favorite_topics] :: User -> [String]

-- | Used as communications methods between two users
data Message
Message :: String -> String -> String -> Day -> Message
[text] :: Message -> String
[from] :: Message -> String
[to] :: Message -> String
[date] :: Message -> Day
instance GHC.Show.Show Types.User
instance GHC.Classes.Eq Types.Message
instance GHC.Show.Show Types.Message
instance GHC.Classes.Ord Types.Message


module Main

-- | Main functions that initiliase users, threads and invoke the other
--   main functions
main :: IO ()

-- | Create a new thread that allow a user to send a message to random user
--   The user must have at least one common interest The process terminate
--   once all the processes have sent 100 messages in total Delay is set
--   1-5 seconds
process :: User -> MVar Int -> MVar [Message] -> MVar [Message] -> [User] -> IO ()

-- | Login the user Check credentials Invoke menu that allow the user to
--   check messaging history
logginUser :: [User] -> [Message] -> IO ()

-- | Main menu that allow logged in user to see his/her conversations
main_menu :: [Message] -> String -> User -> IO ()

-- | Used to count the number of occurence, in this case the number of
--   messages received for each user
countOccurences :: Ord a => [a] -> [(a, Int)]

-- | Used to select a random item from a list
atRandIndex :: [a] -> IO a

-- | Pick a random date between 2022<i>01</i>01 - 2023<i>01</i>01
generateRandomDate :: IO Day

-- | Pick a random message from the list
generateRandomMessage :: IO String

-- | Used assists printing when counting the number of messages received by
--   each user.
printInformation :: (String, Int) -> String

-- | Used to print chat history between the logged in user and the others
printChatHistory :: Message -> String -> String

-- | Used to check if an item of one list contain at least one is present
--   in other list
exists :: Eq a => [a] -> [a] -> Bool

-- | Used to filter out current users and return other users, and help to
--   prevent self-messaging
filterOutCurrentUser :: User -> [User] -> [User]

-- | Display the number of messages received for each users
showNumberOfReceivedMessages :: [Message] -> IO ()

-- | Show between the current user and all other users
showHistory :: [Message] -> String -> IO ()

-- | Show a conversation between two users
showConversationBetweenTwo :: [Message] -> String -> String -> IO ()

-- | Check if two users have at least one common interest
checkIfSameInterests :: User -> User -> IO Bool
